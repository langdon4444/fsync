#!/usr/bin/env python
# This file is part of fsync
#
# fsync is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software 
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# fsync is distributed in the hope that it will be useful, but WITHOUT ANY 
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# fsync. If not, see http://www.gnu.org/licenses/.

import sys, os
import zmq
import socket  # supposed to be the best way to get the hostname
import getpass # supposed to be the best way to get the username
import subprocess
import json

# the editor to use. this can be overriden with an env variable
# or on the command line
DEFAULT_EDITOR = '/usr/local/bin/mate'

# port for ZeroMQ: this needs to be synced between the server and the client,
# so you probably don't want to change it
PORT = 34401

# root directory to put the files on the server
# if the SERVER_ROOT_DIR is /tmp and your hostname is "vsmp55", then
# the files will be put in /tmp/vspm55/bla/bla/bla
SERVER_ROOT_DIR = '/tmp'


def normalize_path(path):
    "Return the cannonical path of a file, relative to $HOME"
    return os.path.relpath(os.path.abspath(path), os.environ['HOME'])


def main(path, editor, server_addr, client_hostname):
    "Run everything!"

    npath = normalize_path(path)
    if not os.path.exists(path):
        # if the file doesn't exist, touch it
        open(path, 'w').close()
    if '..' in npath:
        raise ValueError('Sorry, %s is not in the home directory' % path)
    
    context = zmq.Context.instance()
    sock = context.socket(zmq.REQ)

    # connect the socket. Note, we want to use server_addr, but WITHOUT
    # the username portion -- i.e. if server_addr is user@hostname, we
    # only want to connect the socket to hostname
    if '@' in server_addr:
        server_hostname = server_addr.split('@')[1]
    else:
        server_hostname = server_addr
    sock.connect('tcp://%s:%s' % (server_hostname, PORT))

    server_fn = os.path.join(SERVER_ROOT_DIR, client_hostname, npath)
    client_fn = os.path.abspath(path)
    
    # without trailing slashes, rsync will copy the results back into
    # a subdirectory
    if os.path.isdir(path):
        server_fn += '/'
        client_fn += '/'

    #rsync the file to the server
    def do_rsync():
        # when we send the files to the server, we want to delete any
        # junk thats currently there
        # note, when the server rsyncs the results back, it will NOT use --delete
        cmd = ['/usr/bin/rsync', '--delete', '-r', path, server_addr + ':' + server_fn]
        subprocess.check_output(' '.join(cmd), shell=True, stderr=subprocess.STDOUT)

    try:
        do_rsync()
    except subprocess.CalledProcessError:
        # tell the server to do the mkdir operator that rsync doesn't want to do
        # if not necessary, we'd prefer not to do the MKDIR, which is why we
        # have it in the except block
        sock.send_json({"type":"mkdir",
                        "dir": os.path.dirname(server_fn)})
        assert sock.recv() == 'OK'
        do_rsync()
    
    #http://stackoverflow.com/questions/842059/is-there-a-portable-way-to-get-the-current-username-in-python
    user_at_client = '%s@%s' % (getpass.getuser(), client_hostname)
        
    #alert the server that we've sent it the file
    sock.send(json.dumps({'type': 'path',
                          'displayname': '~/' + npath,
                          'editor': editor,
                          'server_fn': server_fn,
                          'hostname': user_at_client,
                          'client_fn': client_fn}))
    assert sock.recv() == 'OK'


def usage(script_name):
    return 'Usage: %s [-h] [-e EDITOR] {file_or_directory}' % script_name


def help():
    return '''
#########################################################################
##                           fsync client                              ##
##                  http://github.com/rmcgibbo/fsync                   ##
#########################################################################

Inside your SSH session, launch your local editor to work on remote files.

This script will open up a file or directory on your local workstation,
and any edits you make will by synced back to the remote machine. To get
going, you need to run the fsync server on your local workstation -- tt's
a tiny little status bar app.

Note, the default editor is `mate`, so if you don't have textmate, you
might want to change that by setting $FSYNC_EDITOR.

requirements:
  * fsync server app running on local workstation
  * symmetrical passwordless SSH via public keys between your workstation
    and remote.

customize with env variables:
  * $FSYNC_EDITOR                  Set which editor to use on your local
                                   workstation.
  * $FSYNC_USER, $FSYNC_SERVER     Override looking at SSH_CLIENT. If you set
                                   FSYNC_USER=robert and FSYNC_SERVER=vspm10,
                                   your files will be synced to robert@vspm10
                                   instead of whatever's in SSH_CLIENT.
  * $FSYNC_CLIENT_HOSTNAME         Override the hostname of the client.
                                   (machine that you're executing `fs` on)
                                   Use this option if you need to SSH into
                                   the client from your workstation with
                                   a special address

optional arguments:
  -h, --help            Show this help message and exit
  -e, --editor          Choose which editor to use on you local workstation

positional argument:
  {file_or_directory}   The file or directory to open on your local machine'''    


def dispatch():
    "Parse command line options and relevant env variables, then call main()"
    script_name = os.path.basename(sys.argv[0])

    if len(sys.argv) < 2:
        print >> sys.stderr, usage(script_name)
        print >> sys.stderr, '%s: error: too few arguments' % script_name
        return 1
    elif sys.argv[1] in ['-h', '--help']:
        print help()
        return 0
    
    # set the editor
    # each option here overrides the last, if present
    editor = DEFAULT_EDITOR
    if 'FSYNC_EDITOR' in os.environ:
        editor = os.environ['FSYNC_EDITOR']
    if sys.argv[1] in ['-e', '--editor']:
        # this overrides the env variable
        sys.argv.pop(1)
        editor = sys.argv.pop(1)

    # set the server
    if 'FSYNC_SERVER' in os.environ:
        server_addr = os.environ['FSYNC_SERVER']
    elif 'SSH_CLIENT' in os.environ:
        ssh_string = os.environ['SSH_CLIENT']
        server_addr = ssh_string.split()[0]
    else:
        print >> sys.stderr, usage(script_name)
        print >> sys.stderr, ('%s: error: could not find SSH_CLIENT or '
        'FSYNC_SERVER env vars' % script_name)
        return 1

    if 'FSYNC_USER' in os.environ:
        server_addr = os.environ['FSYNC_USER'] + '@' + server_addr

    if 'FSYNC_CLIENT_HOSTNAME' in os.environ:
        client_hostname = os.environ['FSYNC_CLIENT_HOSTNAME']
    else:
        client_hostname = socket.gethostname()

    main(path=sys.argv[1], editor=editor, server_addr=server_addr,
         client_hostname=client_hostname)

   
if __name__ == '__main__':
    status = dispatch()
    sys.exit(status)

